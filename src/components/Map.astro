---
interface Props {
  data: Object[];
  fullscreen?: boolean;
}

const { data, fullscreen } = Astro.props;
console.log(fullscreen);

let mapHeight;
if (fullscreen) {
  mapHeight = '100%';
} else {
  mapHeight = '70%';
}

console.log(mapHeight);
---

<div
  id='hs-grayscale-leaflet'
  class='h-[var(--map-height)] hs-leaflet z-10 m-auto'
  style={{ '--map-height': mapHeight }}
>
</div>

<script define:vars={{ data }}>
  window.addEventListener('load', () => {
    (function () {
      const map = L.map('hs-grayscale-leaflet', {
        center: [44.05937461400064, -93.38859819147521],
        zoom: 9,
        // Prevent dragging over the limit
        // maxBounds: [
        //   [40, -100],
        //   [60, 10],
        // ],
        // maxBoundsViscosity: 1.0,
      });

      function createPopupContent(country, city, short, current, previous) {
        const growUp = `<svg class="size-4 text-teal-500 dark:text-teal-400 " xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="22 7 13.5 15.5 8.5 10.5 2 17"/><polyline points="16 7 22 7 22 13"/></svg>`;
        const growDown = `<svg class="size-4 text-red-500 dark:text-red-400 " xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="22 17 13.5 8.5 8.5 13.5 2 7"/><polyline points="16 17 22 17 22 11"/></svg>`;

        return `<div class="bg-white rounded-xl shadow-[0_10px_40px_10px_rgba(0,0,0,0.08)] w-[160px] p-3">
        <div class="flex mb-1">
          <div class="mt-0.5 me-2">
            <div class="size-4 rounded-full bg-no-repeat bg-center bg-cover" style="background-image: url('../assets/vendor/svg-country-flags/svg/${short}.svg')"></div>
          </div>
          <span class="text-sm font-medium">${city}, ${country}</span>
        </div>
        <div class="flex items-center space-x-1">
          <span class="text-sm text-gray-500 dark:text-neutral-500 ">Active:</span>
          <span class="text-sm ${current.isGrown ? 'text-teal-500 dark:text-teal-400' : 'text-red-500 dark:text-red-400'} ">${current.value}</span>
          ${current.isGrown ? growUp : growDown}
        </div>
        <div class="flex items-center space-x-1">
          <span class="text-sm text-gray-500 dark:text-neutral-500 ">New:</span>
          <span class="text-sm ${previous.isGrown ? 'text-teal-500 dark:text-teal-400' : 'text-red-500 dark:text-red-400'} ">${previous.value}</span>
          ${previous.isGrown ? growUp : growDown}
        </div>
      </div>`;
      }

      function createPopupContentTMP({ name, pastor, email, url }) {
        return `
        <div>
          <h2 class='text-lg'>${name}</h2>
          <p>${pastor}</p>
          <p><a href='mailto:${email}'>${email}</a></p>
          <p><a href='${url}'>Website</a></p>
          </div>
        `;
      }

      L.tileLayer(
        'https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png',
        {
          maxZoom: 19,
          minZoom: 2,
          attribution: 'Â© <a href="https://carto.com/attributions">CARTO</a>',
        }
      ).addTo(map);

      // Sojourners 43.644039556391355, -93.38859819147521
      // Owatonna 44.05937461400064, -93.2502878882635
      // Redemption City Church 44.043209548640746, -92.4932867351392
      // NCC 44.45266343070468, -93.15989457285775
      // Gospel Joy 44.1535996472263, -93.98025713443178

      data.forEach((item) => {
        L.marker(item.coords).bindPopup(createPopupContentTMP(item)).addTo(map);
      });

      let width = document.documentElement.clientWidth;
      if (width < 768) {
        // set the zoom level to 10
        map.setZoom(8);
      } else {
        // set the zoom level to 8
        map.setZoom(9);
      }
    })();
  });
</script>

<style>
  .hs-leaflet.leaflet-touch .leaflet-control-layers,
  .hs-leaflet.leaflet-touch .leaflet-bar {
    border-width: 0px;
  }

  .hs-leaflet.leaflet-touch .leaflet-bar a {
    line-height: 1.5;
    background-color: rgba(255, 255, 255, 0.8);
    box-shadow: 0 1px 2px 0 rgb(0 0 0 / 0.05);
  }

  .hs-leaflet.leaflet-touch .leaflet-bar a:first-child,
  .hs-leaflet.leaflet-touch .leaflet-bar a:last-child {
    border-radius: 8px;
  }

  .hs-leaflet .leaflet-control-zoom-in,
  .hs-leaflet .leaflet-control-zoom-out {
    font-weight: 400;
    font-size: 18px;
    color: #1f2937;
    text-indent: 0px;
  }

  .hs-leaflet .leaflet-bar {
    display: flex;
    flex-direction: column;
    gap: 6px;
  }

  .hs-leaflet .leaflet-bar a {
    border-width: 0;
  }

  .hs-leaflet .leaflet-bar a:hover,
  .hs-leaflet .leaflet-bar a:focus {
    background-color: #e5e7eb;
  }

  .hs-leaflet .leaflet-popup-content-wrapper,
  .hs-leaflet .leaflet-popup-tip {
    box-shadow:
      0 4px 6px -1px rgb(0 0 0 / 0.1),
      0 2px 4px -2px rgb(0 0 0 / 0.1);
  }

  .hs-leaflet .leaflet-popup-tip {
    border-radius: 4px;
  }

  .hs-leaflet.leaflet-container a.leaflet-popup-close-button {
    top: -10px;
    right: -10px;
    border-radius: 9999px;
    background-color: #f3f4f6;
    color: #1f2937;
    font-size: 14px;
    line-height: 1.6;
  }

  .hs-leaflet.leaflet-container a.leaflet-popup-close-button:hover {
    background-color: #f3f4f6;
  }

  .hs-leaflet-unstyled-popover .leaflet-popup-content-wrapper {
    display: flex;
  }

  .hs-leaflet-unstyled-popover .leaflet-popup-content {
    padding: 0;
    margin: 0;
    background: none;
    line-height: normal;
    border-radius: 0;
    font-size: inherit;
    min-height: auto;
  }
</style>
